<?php

/**
 * Implemetation of hook_menu().
 */
function flippingbook_menu() {
  $menu['admin/content/flippingbook-settings'] = array(
    'title' => 'FlippingBook Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flippingbook_admin_settings_form'),
    'access arguments' => array('administer content types'),
    'file' => 'flippingbook.admin.inc',
  );

  $menu['node/%node/flippingbook'] = array(
    'title' => 'FlippingBook View',
    'page callback' => 'flippingbook_view',
    'page arguments' => array(1),
    'access callback' => 'flippingbook_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['node/%node/flippingbook-settings'] = array(
    'title' => 'FlippingBook Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flippingbook_edit_form', 1),
    'access callback' => 'flippingbook_access',
    'access arguments' => array('edit', 1),
    'file' => 'flippingbook.edit_form.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['flippingbook-contents-ahah'] = array(
    'description' => 'FlippingBook contents form AHAH callback',
    'page callback' => 'flippingbook_contents_ahah',
    'access callback' => 'user_access',
    'access arguments' => array('edit flippingbook'),
    'file' => 'flippingbook.edit_form.inc',
    'type' => MENU_CALLBACK,
  );
  
  $menu['flippingbook'] = array(
    'page callback' => 'flippingbook_imagecache_pdf_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  

  return $menu;
}

/**
 * Implemetation of hook_theme().
 */
function flippingbook_theme() {
  $theme['flippingbook'] = array(
    'arguments' => array(
      'flippingbook' => null,
      'current_page' => 1,
    ),
    'template' => 'flippingbook',
  );
  
  $theme['flippingbook_contents_form'] = array(
    'arguments' => array(
      'form' => null,
    ),
    'file' => 'flippingbook.edit_form.inc',
  );

  return $theme;
}

/**
 * Implemetation of hook_perm().
 */
function flippingbook_perm() {
  return array('view flippingbook', 'edit flippingbook', 'edit flippingbook advanced settings');
}

/**
 * Implemetation of hook_nodeapi().
 */
function flippingbook_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {flippingbook} WHERE nid = %d', $node->nid);
      break;
      
    case 'load':
      $node_types = variable_get('flippingbook_node_types', array());
      if (@$node_types[$node->type]) {
        return array('flippingbook' => (array)flippingbook_load($node));
      }
  }
}

function flippingbook_preprocess_page(&$vars) {
  $node_types = variable_get('flippingbook_node_types', array());
  if (isset($vars['node']) && isset($node_types[$vars['node']->type])) {
    if (arg(2) == '' && variable_get('flippingbook_override_node_output', 0)) {
      $vars['template_files'][] = 'page-node-flippingbook';
    }
    $node = $vars['node'];
//  var_dump($vars);
  }
}


/**
 * A theme preprocess function to automatically allow view-based node
 * templates if called from a view.
 *
 * The 'modules/node.views.inc' file is a better place for this, but
 * we haven't got a chance to load that file before Drupal builds the
 * node portion of the theme registry.
 */
//function flippingbook_preprocess_node(&$vars) {
//  if ($vars['page'] && $vars['teaser']) {
//    $vars['content'] = flippingbook_view($vars['node']);
//    $node_types = variable_get('flippingbook_node_types', array());
//    isset($node_types[$vars['type']])
//
//    $vars['template_files'][] = 'node-flippingbook'
//  }
//  dpm(__FUNCTION__);
//  dpm($vars);
//}

function flippingbook_theme_registry_alter(&$theme_registry) {
  $theme_registry['page']['theme paths'][] = drupal_get_path('module', 'flippingbook');
  
//  dpm(__FUNCTION__);
//  dpm(func_get_args());
}


/**
 * Implemetation of hook_link().
 */
function flippingbook_link($type, $object, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && flippingbook_access('view', $object)) {
    if (/*$teaser && */isset($object->flippingbook)) {
      $links['view_flippingbook'] = array(
        'title' => t('View FlippingBook'),
        'href' => "node/$object->nid/flippingbook",
      );
      
      $popup_url = url("node/$object->nid/flippingbook");
      $links['view_flippingbook_popup'] = array(
        'title' => t('View FlippingBook popup'),
        'href' => "node/$object->nid/flippingbook",
        'attributes' => array(
          'target' => '_blank',
          'onclick' => "window.open('$popup_url','','menubar=0,resizable=1'); return false;"
        ),
      );
    }
  }
  
  return $links;
}

/**
 * Check access to flippingbook pages
 *
 * @param object $node
 * @param string $op
 * @return boolean
 */
function flippingbook_access($op = 'view', $node) {
  $node_types = variable_get('flippingbook_node_types', array());
  return @$node_types[$node->type] && user_access("$op flippingbook");
}

/**
 * Loads FlippingBook by node
 *
 * @param object $node
 * @return FlippingBook|null
 */
function flippingbook_load($node) {
  list($src_field, $pages_field) = (array)_flippingbook_get_fields($node->type);
  if (!$src_field || !$pages_field) return;
    
  $res  = db_query('SELECT * FROM {flippingbook} WHERE nid = %d', $node->nid);
  $book = db_fetch_object($res);
  $book->title = $node->title;
  $book->contents = unserialize($book->contents);
  $book->settings = unserialize($book->settings);
  
  
  $normalImagecachePreset = isset($book->settings['normalImagecachePreset'])
                          ? $book->settings['normalImagecachePreset']
                          : 'none';
  
  $pagesBasePath = base_path().'flippingbook/'. $normalImagecachePreset .'/';

  if (isset($book->settings['zoomImagecachePreset'])) {
    $book->settings['zoomPath'] = base_path() .'flippingbook/'. $book->settings['zoomImagecachePreset'] .'/';
    $book->settings['zoomEnabled'] = true;
  }
  else {
    $book->settings['zoomEnabled'] = false;
  }

  $pages = array();
  foreach ((array)$node->{$pages_field['field_name']} as $page) {
    $pages[] = $pagesBasePath . $page['filename'];
  }
  $downloadURL = '/'. $node->{$src_field['field_name']}[0]['filepath'];
  
  $book->pages = $pages;
  $book->downloadURL = $downloadURL;
  
  return (array)$book;
}

/**
 * Print FlippingBook
 *
 * @param object $node
 */
function flippingbook_view($node, $current_page = 1) {
  $path = drupal_get_path('module', 'flippingbook');
  
  drupal_add_css("$path/lib/css/liquid-green.css");
  drupal_add_js("$path/lib/js/liquid.js");
  drupal_add_js("$path/lib/js/swfobject.js");
  drupal_add_js("$path/lib/js/flippingbook.js");

  drupal_set_html_head('<base href="'. base_path() . $path .'/lib/" />');
  
  return theme('flippingbook', $node->flippingbook, $current_page);
}

function _flippingbook_get_fields($node_type) {
  $fields = content_fields(null, $node_type);

  foreach ($fields as $field) {
    if ($field['type'] == 'filefield' && $field['widget']['module'] == 'pdf_to_imagefield') {
      return array($field, $fields[$field['widget']['target_imagefield']]);
    }
  }
}

/**
 * Workaround to use imagecache for pages
 *
 * @param object $node
 * @param string $preset
 * @param string $filepath
 */
function flippingbook_imagecache_pdf_page() {
  $args = func_get_args();
  array_shift($args);
  $preset = array_shift($args);
  $filename = array_pop($args);
  $filepath = file_directory_path() .'/'. $filename;
  
  if (!empty($preset) || file_exists($filepath)) {
    if (!module_exists('imagecache') || $preset == 'none') {
      module_invoke('imagecache', 'cache', $preset, $filepath);
      return;
    }
    else {
      $headers = module_invoke_all('file_download', $filepath);
      if (count($headers)) {
        file_transfer($filepath, $headers);
        return;
      }
    }
  }
  
  drupal_not_found();
}